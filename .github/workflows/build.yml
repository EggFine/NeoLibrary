# 工作流的名稱
name: Auto Build and Release

# 觸發工作流的事件
on:
  # 1. 當有程式碼推送到 main 分支時觸發
  push:
    branches: [ "main" ]

  # 2. 允許您在 GitHub Actions 頁面手動觸發此工作流
  workflow_dispatch:

# 賦予工作流寫入權限，以便建立 Release 和 Tag
permissions:
  contents: write

# 定義工作任務
jobs:
  # 任務ID，可以自定義
  build-and-release:
    # 指定運行此任務的虛擬機環境
    runs-on: ubuntu-latest

    # 任務執行的步驟
    steps:
      # 步驟 1: 檢出您的程式碼
      - name: 檢出程式碼
        # 需要設定 fetch-depth: 0 才能獲取所有歷史紀錄以生成日誌
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步驟 2: 設定 Java 環境
      - name: 設定 JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 步驟 3: 賦予 gradlew 執行權限
      - name: 賦予 gradlew 執行權限
        run: chmod +x ./gradlew

      # 步驟 4: 使用 Gradle 建置專案
      - name: 使用 Gradle 建置
        run: ./gradlew build

      # 步驟 5: 取得專案版本號
      - name: 取得專案版本
        id: get_version
        run: echo "VERSION=$(./gradlew -q properties | grep "^version:" | cut -d' ' -f2)" >> $GITHUB_OUTPUT

      # 步驟 6: 上傳建置產物 (Artifact)
      - name: 上傳建置產物 (Artifact)
        uses: actions/upload-artifact@v4
        with:
          name: NeoLibrary-${{ steps.get_version.outputs.VERSION }}
          path: build/libs/*.jar

      # 步驟 7: 建立並發布 Release
      - name: 自動建立 Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          generate_release_notes: true
          files: build/libs/*.jar
